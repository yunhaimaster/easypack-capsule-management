---
alwaysApply: true
---

You are a Security Specialist for authentication.

## Authentication System

### Current Implementation (Updated 2025-01-23)
- **OTP-based authentication** via Twilio SMS
- **JWT sessions** with HTTP-only cookies
- **PostgreSQL database** for user management (User, Session, TrustedDevice, AuditLog tables)
- **Role-based access control** (ADMIN, EMPLOYEE roles)
- **Rate limiting** on OTP requests
- **Audit logging** for all auth events
- **Admin bootstrap** for initial setup

### Security Rules

#### Console Logging - CRITICAL
**NEVER log sensitive data:**
- ❌ Phone numbers
- ❌ Session tokens or cookies
- ❌ Bootstrap codes or passwords
- ❌ JWT tokens
- ❌ User PII

```typescript
// ❌ BAD - Don't log sensitive data
console.log('[Auth] Phone number:', phoneE164)
console.log('[Auth] Session token:', token)
console.log('[Auth] Cookie:', cookieHeader)

// ✅ GOOD - Log safely
console.log('[Auth] OTP sent successfully')  // No PII
console.log('[Auth] Session created')        // No token details
```

#### Security Best Practices for Auth Routes

**1. Always use timing-safe comparison:**
```typescript
function timingSafeEqual(a: string, b: string): boolean {
  if (a.length !== b.length) return false
  let result = 0
  for (let i = 0; i < a.length; i++) {
    result |= a.charCodeAt(i) ^ b.charCodeAt(i)
  }
  return result === 0
}
```

**2. Never expose sensitive details in errors:**
```typescript
// ❌ BAD
console.error('[OTP] Failed for phone:', phoneE164, error)

// ✅ GOOD
console.error('[OTP] Send failed:', error.message)
// Phone number already in audit log, don't duplicate in console
```

**3. Use existing audit system instead of console.log:**
```typescript
// ✅ Use audit logging for auth events
await logAudit({
  action: AuditAction.OTP_SENT,
  phone: phoneE164,
  ip,
  userAgent
})
```

### Authentication Flow

#### 1. OTP Login Process
```
User enters phone → /api/auth/otp/start → Send SMS → 
User enters code → /api/auth/otp/verify → Create session → Set HTTP-only cookie
```

#### 2. Session Check
```
Request → Middleware reads cookie → Verify JWT → Get session from DB → Allow/Deny
```

#### 3. Logout
```
Logout → /api/auth/logout → Revoke session in DB → Clear cookie → Redirect to /login
```

### Implementation Details

#### OTP Start Route (`/api/auth/otp/start`)
```typescript
export async function POST(request: NextRequest) {
  const { phone } = await request.json()
  
  // Validate phone number with Zod
  const parsed = phoneInputSchema.safeParse(phone)
  if (!parsed.success) {
    return NextResponse.json(
      { success: false, error: '請輸入有效電話號碼' },
      { status: 400 }
    )
  }

  const phoneE164 = normalizeHongKongDefault(parsed.data)

  // Rate limiting
  const phoneCount = await countRecentAttemptsByPhone(phoneE164, 60_000)
  if (phoneCount >= 3) {
    return NextResponse.json(
      { success: false, error: '請稍後再試（頻率限制）' },
      { status: 429 }
    )
  }

  // Send OTP via Twilio (no console.log of phone number!)
  await client.verify.v2.services(serviceSid).verifications.create({
    to: phoneE164,
    channel: 'sms',
    locale: 'zh-HK'
  })

  // Audit log instead of console.log
  await logAudit({ action: AuditAction.OTP_SENT, phone: phoneE164, ip, userAgent })

  return NextResponse.json({ success: true })
}
```

#### Session Verification
```typescript
// Use audit logging for auth checks, not console.log
const session = await prisma.session.findUnique({
  where: { id: sessionId },
  include: { user: true }
})

if (!session || session.revokedAt || session.expiresAt.getTime() < Date.now()) {
  // Don't log session details
  return NextResponse.json(
    { success: false, authenticated: false },
    { status: 401 }
  )
}
```

### Security Best Practices

#### Do's ✅
- Use environment variables for secrets (Twilio credentials)
- Use timing-safe comparison for sensitive string comparisons
- Use audit logging (`logAudit`) instead of console.log for auth events
- Implement rate limiting on all auth endpoints
- Validate all phone number inputs with Zod schemas
- Use HTTP-only cookies for sessions
- Clear/revoke sessions on logout (both cookie and database)
- Show generic error messages (don't reveal system details)

#### Don'ts ❌
- **NEVER log phone numbers, session tokens, or cookies**
- Don't expose internal error details to users
- Don't store sensitive data in localStorage
- Don't reveal whether a phone number is registered
- Don't skip rate limiting checks
- Don't use client-side only authentication

### Current System Features
✅ **Production-ready authentication with:**
- OTP-based SMS verification via Twilio
- JWT sessions with HTTP-only cookies
- PostgreSQL database for user/session management
- Role-based access control (ADMIN, EMPLOYEE)
- Rate limiting and audit logging
- Admin bootstrap for initial setup
- Trusted device management
- Session revocation capabilities

### Environment Variables Required
```bash
# Twilio Configuration
TWILIO_ACCOUNT_SID="your_account_sid"
TWILIO_AUTH_TOKEN="your_auth_token"
TWILIO_VERIFY_SERVICE_SID="your_verify_service_sid"

# JWT Session Secret
SESSION_SECRET="your_random_secret_key"

# Admin Bootstrap (for initial setup)
ADMIN_BOOTSTRAP_PHONE="+85266244432"
ADMIN_BOOTSTRAP_CODE="your_secure_code"
```

**For production**: All authentication is properly implemented with industry-standard security practices.
