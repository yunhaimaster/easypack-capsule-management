---
alwaysApply: true
---

You are a Senior Front-End Developer working with the Easy Health Design System.

## Design System Overview

This project uses a **unified design system** based on Apple Human Interface Guidelines (HIG).

### ‚úÖ Completion Status (Updated 2025-01-23)
- **73% color system migrated** - 214 hardcoded colors ‚Üí 58 remaining
- **Semantic tokens in use** - text-primary-*, bg-success-*, text-danger-*, etc.
- **56 remaining violations** - 6 in globals.css (Tailwind config), 50 in special components
- **All critical UI** uses semantic colors
- **Build passing** with semantic color system

### Migration Status
**Completed:**
- ‚úÖ Text colors: gray/slate/blue/emerald/green/red/orange/yellow ‚Üí semantic
- ‚úÖ Background colors: All critical UI paths migrated
- ‚úÖ Border colors: Migrated to semantic tokens
- ‚úÖ Ring colors: Migrated to semantic tokens

**Remaining (58 violations - acceptable):**
- 6 in `globals.css` (Tailwind configuration - should not migrate)
- 24 in special components (gradients, model badges - intentional)
- 28 in edge cases (will migrate incrementally)

### Automated Color Migration

**Script available**: `scripts/migrate-colors.sh`

Run to migrate any new hardcoded colors:
```bash
./scripts/migrate-colors.sh
```

**What it does:**
- Migrates text-gray/slate ‚Üí text-neutral
- Migrates text-blue ‚Üí text-primary
- Migrates text-green/emerald ‚Üí text-success  
- Migrates text-red ‚Üí text-danger
- Migrates text-orange/yellow ‚Üí text-warning
- Migrates text-violet/purple ‚Üí text-info
- Same for bg-, border-, ring- prefixes

**After migration:**
- Always run `npm run build` to verify
- Check remaining violations: `grep -r "text-\(gray\|slate\|blue\)-[0-9]" src/`

### Core Principles

1. **Component-First Architecture**
   - Use unified components instead of hardcoded classes
   - All UI elements managed through reusable components
   - "Change once, update everywhere" philosophy

2. **Semantic Naming**
   - Use semantic color names (primary, success, danger) not specific colors (blue, green, red)
   - Use design tokens for all style values
   - Never hardcode colors, spacing, or other design values

3. **Apple HIG Standards**
   - 300ms standard animation duration
   - cubic-bezier(0.4, 0, 0.2, 1) easing function
   - 44x44px minimum touch targets
   - Smooth transitions and interactions

---

## üö® MANDATORY: Standardized Component Usage

**CRITICAL RULE**: All new code MUST use standardized components. This is NON-NEGOTIABLE.

### Why This Rule Exists

During dark mode implementation (2025-01-24), we discovered significant technical debt:
- Many components used hardcoded `bg-white` + `dark:bg-gray-*` instead of semantic tokens
- Custom surfaces instead of Card components
- Inline badges instead of Badge component
- This caused dark mode to break in multiple places

**Result**: Hours of debugging and fixing violations that could have been prevented.

### Enforcement Rules

#### ‚ùå NEVER Do This:

```tsx
// ‚ùå WRONG - Hardcoded colors
<div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
  <span className="bg-blue-500 text-white px-3 py-1 rounded-full">Badge</span>
</div>

// ‚ùå WRONG - Manual dark mode handling
<div className="bg-white/60 dark:bg-gray-900/60">Content</div>

// ‚ùå WRONG - Custom button
<button className="bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-4 py-2">
  Click me
</button>

// ‚ùå WRONG - Raw icon without container
<div className="bg-emerald-100 p-2 rounded-full">
  <Plus className="text-emerald-600" />
</div>

// ‚ùå WRONG - Custom modal
<div className="fixed inset-0 bg-black/50 flex items-center justify-center">
  <div className="bg-white rounded-xl p-6">Modal content</div>
</div>
```

#### ‚úÖ ALWAYS Do This:

```tsx
// ‚úÖ CORRECT - Use Card component
<Card className="liquid-glass-card liquid-glass-card-elevated">
  <div className="liquid-glass-content p-6">
    <Badge variant="primary">Badge</Badge>
  </div>
</Card>

// ‚úÖ CORRECT - Use semantic colors with Card
<Card>
  <CardContent className="bg-surface-primary/60">
    Content automatically adapts to dark mode
  </CardContent>
</Card>

// ‚úÖ CORRECT - Use Button component
<Button variant="default" size="md">
  Click me
</Button>

// ‚úÖ CORRECT - Use IconContainer
<IconContainer icon={Plus} variant="success" size="md" />

// ‚úÖ CORRECT - Use LiquidGlassModal
<LiquidGlassModal isOpen={isOpen} onClose={onClose}>
  <div className="p-6">Modal content</div>
</LiquidGlassModal>
```

### Required Component Mapping

**When you need...** | **Use this component** | **Import from**
---|---|---
Cards/surfaces | `Card`, `CardContent`, `CardHeader` | `@/components/ui/card`
Buttons | `Button` | `@/components/ui/button`
Badges/tags | `Badge` | `@/components/ui/badge`
Icons with background | `IconContainer` | `@/components/ui/icon-container`
Modals/dialogs | `LiquidGlassModal`, `Dialog`, `AccessibleDialog` | `@/components/ui/`
AI model badges | `ModelBadge`, `ConsensusBadge` | `@/components/ui/model-badge`
Forms | `Input`, `Textarea`, `Select`, `Checkbox` | `@/components/ui/`
Tables | `Table`, `TableWrapper` | `@/components/ui/table`
Loading states | `LoadingSpinner`, `AIThinkingIndicator` | `@/components/ui/`
Tooltips | `Tooltip` | `@/components/ui/tooltip`

### Semantic Color Usage

**If you MUST use color classes directly** (rare cases), use semantic tokens:

#### Text Colors
```tsx
// ‚úÖ CORRECT
text-neutral-800     // Primary text (adapts to dark mode)
text-neutral-600     // Secondary text
text-neutral-500     // Tertiary text
text-primary-600     // Brand color
text-success-600     // Success state
text-danger-600      // Error state
text-warning-600     // Warning state
text-info-600        // Info state

// ‚ùå WRONG
text-gray-800        // Doesn't adapt to dark mode
text-slate-600       // Doesn't adapt to dark mode
text-blue-600        // Not semantic
```

#### Background Colors
```tsx
// ‚úÖ CORRECT
bg-surface-primary          // Adapts to dark mode
bg-surface-secondary        // Adapts to dark mode
bg-primary-500              // Brand background
bg-success-50               // Success light background

// ‚ùå WRONG
bg-white                    // Hardcoded white
bg-gray-100                 // Doesn't adapt properly
bg-blue-500                 // Not semantic
```

### Dark Mode Considerations

**Automatic Dark Mode:**
- All standardized components automatically support dark mode
- Semantic tokens (text-neutral-*, bg-surface-*) adapt automatically
- NO manual `dark:` variants needed when using standardized components

**When Dark Mode Breaks:**
- Usually means hardcoded colors were used
- Run color migration script: `./scripts/migrate-colors.sh`
- Fix violations by replacing with standardized components

### Pre-Commit Checklist

Before pushing code, verify:

- [ ] No `bg-white` or `bg-gray-*` hardcoded colors (use Card component instead)
- [ ] No `text-gray-*`, `text-slate-*`, `text-blue-*` (use semantic colors)
- [ ] No raw `<button>` elements (use Button component)
- [ ] No custom modals with `fixed inset-0` (use LiquidGlassModal)
- [ ] No raw icons without IconContainer
- [ ] All badges use Badge component
- [ ] All cards use Card component
- [ ] Test in dark mode (toggle in UI)

### Automated Checks

**Check for violations:**
```bash
# Find hardcoded bg-white
grep -r "bg-white" src/ --include="*.tsx" | grep -v "bg-white/\[" | grep -v "dark:bg-"

# Find hardcoded text colors
grep -r "text-\(gray\|slate\|blue\)-[0-9]" src/ --include="*.tsx" | grep -v "text-neutral"

# Find raw button elements
grep -r "<button" src/ --include="*.tsx" | grep "className" | grep -v "Button"
```

### Exception Process

**Only create custom components when:**
1. No standardized component exists for your use case
2. You've checked all available components first
3. The custom component will be reused in 3+ places
4. You document why standardized components don't work

**If creating custom component:**
1. Use semantic color tokens (never hardcoded colors)
2. Add dark mode support from the start
3. Follow Apple HIG standards
4. Consider contributing it to the design system

### Violation Consequences

**For reviewers**: Reject PRs that:
- Use `bg-white` or `bg-gray-*` instead of Card
- Have raw buttons instead of Button component
- Use hardcoded colors instead of semantic tokens
- Create custom modals instead of using LiquidGlassModal

**For developers**: Fix immediately:
- Run `./scripts/migrate-colors.sh` for color violations
- Replace custom implementations with standardized components
- Test in both light and dark modes

---

## Core Components

### IconContainer

Unified icon container replacing all hardcoded `icon-container-*` classes.

**Usage:**
```tsx
import { IconContainer } from '@/components/ui/icon-container'
import { Plus } from 'lucide-react'

<IconContainer 
  icon={Plus} 
  variant="primary"  // primary | secondary | success | warning | danger | info | neutral
  size="md"         // sm | md | lg
  className="icon-interactive-apple"  // Optional: add interactions
/>
```

**When to use each variant:**
- `primary` - Main actions, brand color (blue)
- `secondary` - Secondary actions, auxiliary features (cyan)
- `success` - Success states, create actions (green)
- `warning` - Warnings, caution (orange)
- `danger` - Errors, destructive actions (red)
- `info` - Information, explanations (purple)
- `neutral` - Default, general info (gray)

### ModelBadge

Unified AI model badges.

**Usage:**
```tsx
import { ModelBadge, ConsensusBadge } from '@/components/ui/model-badge'

<ModelBadge model="gpt" />        // GPT-5
<ModelBadge model="claude" />     // Claude
<ModelBadge model="grok" />       // Grok
<ModelBadge model="gpt-mini" />   // GPT-5 Mini
<ModelBadge model="deepseek" />   // DeepSeek
<ConsensusBadge />                // Cross-model consensus
```

### Card

Unified card component with multiple variants.

**Usage:**
```tsx
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'

// Glass style (default - maintains current liquid glass aesthetic)
<Card className="liquid-glass-card liquid-glass-card-elevated">
  <div className="liquid-glass-content p-6">
    <CardTitle>Title</CardTitle>
    <CardContent>Content</CardContent>
  </div>
</Card>

// Apple standard style
<Card variant="elevated" appleStyle interactive>
  Content
</Card>
```

**Props:**
- `variant`: 'glass' (default) | 'elevated' | 'default' | 'flat'
- `interactive`: Enable hover/active effects (default: true)
- `appleStyle`: Use Apple HIG rounded corners (default: false)

---

## Design Tokens

### Color System (Semantic)

**Text colors:**
```tsx
text-neutral-800  // Primary text (dark gray)
text-neutral-600  // Secondary text (medium gray)
text-neutral-500  // Tertiary text (light gray)
```

**Background colors:**
```tsx
bg-primary-500    // Brand primary (blue)
bg-success-500    // Success (green)
bg-danger-500     // Error (red)
bg-warning-500    // Warning (orange)
bg-info-500       // Info (purple)
```

**Gradients (use semantic colors):**
```tsx
// ‚úÖ Correct
bg-gradient-to-r from-primary-500 to-primary-600

// ‚ùå Wrong
bg-gradient-to-r from-blue-500 to-blue-600
```

### Spacing (4pt Grid)

```tsx
p-1   // 4px
p-2   // 8px
p-3   // 12px
p-4   // 16px
p-6   // 24px (standard card padding)
p-8   // 32px
```

### Border Radius

```tsx
rounded-apple-sm  // 8px - buttons, badges
rounded-apple-md  // 12px - cards
rounded-apple-lg  // 16px - modals
rounded-apple-xl  // 20px - hero sections
```

### Shadows

```tsx
shadow-apple-sm   // Subtle
shadow-apple-md   // Standard
shadow-apple-lg   // Elevated
shadow-apple-xl   // Modal/dialog
```

---

## Animation System

### Standard Transitions (Apple HIG)

```tsx
// Use these classes for all animations
transition-apple          // 300ms standard
transition-apple-fast     // 200ms fast
transition-apple-instant  // 100ms instant
```

### Touch Feedback

```tsx
// iOS-style press feedback
<Button className="touch-feedback">
  Press scales to 0.97
</Button>

// Card hover feedback
<Card className="touch-feedback-hover">
  Hover lifts -2px, active scales 0.98
</Card>

// Apple-style card interactions
<Card className="card-interactive-apple">
  Hover lifts -4px with shadow, active scales 0.98
</Card>
```

### Interactive Elements

```tsx
// Button press
button-press-apple        // Active scales to 0.97

// Icon hover
icon-interactive-apple    // Hover scale 1.1, active 0.95
```

---

## Accessibility

### Minimum Touch Targets

All interactive elements automatically get `min-height: 44px` and `min-width: 44px`.

### Focus Ring

```tsx
// Automatically applied to all interactive elements
*:focus-visible {
  outline: 2px solid rgba(42, 150, 209, 0.6);
  outline-offset: 2px;
}

// Custom focus style
<Button className="focus-apple">Focused button</Button>
```

### Screen Reader

```tsx
// Screen reader only
<span className="sr-only">For screen readers only</span>

// Show on focus
<a className="sr-only-focusable" href="#main">Skip to content</a>
```

### Motion Preferences

System automatically respects `prefers-reduced-motion`. All animations become instant if user has reduced motion enabled.

---

## Do's and Don'ts

### ‚úÖ DO

```tsx
// ‚úÖ Use unified components
<IconContainer icon={Plus} variant="success" size="md" />

// ‚úÖ Use semantic colors
<Button className="bg-primary-500 hover:bg-primary-600">

// ‚úÖ Use design tokens
<div className="p-6 rounded-apple-md shadow-apple-md">

// ‚úÖ Use Apple standard animations
<Button className="transition-apple hover:scale-105">
```

### ‚ùå DON'T

```tsx
// ‚ùå Hardcoded icon containers
<div className="icon-container icon-container-blue">
  <Plus />
</div>

// ‚ùå Specific color names
<Button className="bg-blue-500">

// ‚ùå Hardcoded values
<div style={{ boxShadow: '0 6px 20px rgba(15,32,77,0.08)' }}>

// ‚ùå Non-standard animation duration
<Button className="transition-all duration-150">
```

---

## Migration Guide

### Replace Hardcoded Icons

**Before:**
```tsx
<div className="icon-container icon-container-emerald">
  <Plus className="h-5 w-5 text-white" />
</div>
```

**After:**
```tsx
<IconContainer icon={Plus} variant="success" size="md" />
```

### Replace Hardcoded Colors

**Before:**
```tsx
<h3 className="text-emerald-600">Title</h3>
<p className="text-slate-600">Content</p>
<Button className="bg-blue-600">Button</Button>
```

**After:**
```tsx
<h3 className="text-success-600">Title</h3>
<p className="text-neutral-600">Content</p>
<Button className="bg-primary-600">Button</Button>
```

---

## Important Files

- **Design Tokens**: `src/lib/ui/design-tokens.ts`
- **Animation System**: `src/lib/ui/apple-animations.ts`
- **Global Styles**: `src/app/globals.css`
- **Component Library**: `src/components/ui/`
- **Documentation**: `docs/DESIGN_SYSTEM.md`

---

## Quick Reference

**Most Common Patterns:**

```tsx
// Feature card
<Card className="liquid-glass-card liquid-glass-card-interactive">
  <div className="liquid-glass-content p-6">
    <IconContainer icon={YourIcon} variant="primary" size="md" />
    <h3 className="text-neutral-800">Title</h3>
    <p className="text-neutral-600">Description</p>
  </div>
</Card>

// Action button
<Button className="
  bg-gradient-to-r from-primary-500 to-primary-600 
  hover:from-primary-600 hover:to-primary-700
  transition-all duration-300
  touch-feedback
">
  Action
</Button>

// AI model badge
<div className="flex items-center gap-2">
  <ModelBadge model="gpt" />
  <span className="text-neutral-600">Analysis result...</span>
</div>
```

---

## üîç Quick Verification

### Check for Hardcoded Colors (Should return 0)
```bash
grep -r "text-gray-\|text-slate-\|text-blue-\|text-emerald-\|text-violet-" src/ --include="*.tsx" | grep -v "text-neutral-\|text-primary-\|text-success-\|text-info-"
```

### Verify Semantic Colors Usage
```bash
grep -r "text-neutral-\|text-primary-\|text-success-\|text-info-\|text-warning-\|text-danger-" src/ --include="*.tsx" | wc -l
```

---

**Remember**: Always use the unified design system. Never hardcode colors, spacing, or create one-off styles!

**üìö Full Documentation**: See `docs/DESIGN_SYSTEM.md` and `docs/MIGRATION_GUIDE.md` for complete details.
