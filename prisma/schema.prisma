// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// =====================
/// Authentication & Audit
/// =====================

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum AuditAction {
  // Authentication
  OTP_SENT
  OTP_VERIFY_SUCCESS
  OTP_VERIFY_FAIL
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  SESSION_REFRESH
  DEVICE_TRUST_CREATED
  DEVICE_TRUST_REVOKED

  // User Management
  USER_CREATED
  USER_DELETED
  ROLE_UPDATED

  // Production Orders (Legacy - will be migrated to Work Orders)
  ORDER_CREATED
  ORDER_VIEWED
  ORDER_UPDATED
  ORDER_DELETED
  ORDER_EXPORTED

  // Work Orders (New Unified System)
  WORK_ORDER_CREATED
  WORK_ORDER_VIEWED
  WORK_ORDER_UPDATED
  WORK_ORDER_DELETED
  WORK_ORDER_EXPORTED
  WORK_ORDER_IMPORTED
  WORK_ORDER_BULK_UPDATED
  WORK_ORDER_STATUS_CHANGED

  // Capsulation Orders
  CAPSULATION_ORDER_CREATED
  CAPSULATION_ORDER_VIEWED
  CAPSULATION_ORDER_UPDATED
  CAPSULATION_ORDER_DELETED

  // Recipes
  RECIPE_CREATED
  RECIPE_VIEWED
  RECIPE_UPDATED
  RECIPE_DELETED
  RECIPE_EXPORTED

  // Work Logs
  WORKLOG_CREATED
  WORKLOG_UPDATED
  WORKLOG_DELETED

  // Marketing
  MARKETING_GENERATED
  MARKETING_EXPORTED

  // AI Features
  AI_GRANULATION_ANALYZED
  AI_RECIPE_GENERATED
  AI_CHAT_INTERACTION
  AI_IMAGE_GENERATED

  // Order Linking
  LINK_CREATED
  LINK_REMOVED

  // Manager Scheduling Table
  SCHEDULING_ENTRY_CREATED
  SCHEDULING_ENTRY_UPDATED
  SCHEDULING_ENTRY_DELETED
  SCHEDULING_REORDERED
  SCHEDULING_SYNC_FAILED

  // Admin Impersonation
  IMPERSONATION_STARTED
  IMPERSONATION_ENDED
}

model User {
  id        String   @id @default(cuid())
  phoneE164 String   @unique
  nickname  String?  @db.VarChar(50)
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions           Session[]
  devices            TrustedDevice[]
  auditLogs          AuditLog[]
  workOrdersInCharge UnifiedWorkOrder[] @relation("WorkOrderPersonInCharge")
  capsulationOrders  CapsulationOrder[] @relation("CapsulationOrderCustomerService")
  productionOrders   ProductionOrder[]  @relation("ProductionOrderCustomerService")

  @@index([role])
  @@map("users")
}

model Session {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  userAgent String?
  ip        String?

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model TrustedDevice {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceIdHash String
  userAgent    String?
  ipFirstUsed  String?
  createdAt    DateTime  @default(now())
  lastSeenAt   DateTime  @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?

  @@unique([userId, deviceIdHash])
  @@index([expiresAt])
  @@map("trusted_devices")
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  phone     String?
  action    AuditAction
  ip        String?
  userAgent String?
  metadata  Json?
  createdAt DateTime    @default(now())

  @@index([createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

model OtpAttempt {
  id        String   @id @default(cuid())
  phoneE164 String
  ip        String?
  createdAt DateTime @default(now())

  @@index([phoneE164, createdAt])
  @@index([ip, createdAt])
  @@map("otp_attempts")
}

model ProductionOrder {
  id                 String    @id @default(cuid())
  customerName       String // 客戶名稱
  productName        String    @default("未命名產品") // 產品名字
  productionQuantity Int // 生產數量
  unitWeightMg       Float // 單粒總重量（計算）
  batchTotalWeightMg Float // 批次總重量（計算）
  completionDate     DateTime? // 完工日期
  processIssues      String? // 製程問題記錄
  qualityNotes       String? // 品管備註
  capsuleColor       String? // 膠囊顏色
  capsuleSize        String? // 膠囊大小 (#1, #0, #00)
  capsuleType        String? // 膠囊成份 (明膠胃溶, 植物胃溶, 明膠腸溶, 植物腸溶)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // User reference with safe deletion
  customerServiceId String?
  customerService   User?   @relation("ProductionOrderCustomerService", fields: [customerServiceId], references: [id], onDelete: SetNull)

  actualProductionQuantity Int? // 實際生產完成數量（粒）
  materialYieldQuantity    Int? // 材料實際可做數量（粒）
  lockPassword             String? // 4 位數密碼保護（nullable）

  // Status Management
  status          ProductionOrderStatus?
  statusUpdatedAt DateTime?

  // Link to work order (1:many relationship - one work order can have multiple production orders)
  workOrderId String?
  workOrder   UnifiedWorkOrder? @relation("ProductionWorkOrder", fields: [workOrderId], references: [id], onDelete: SetNull)

  ingredients Ingredient[]
  worklogs    OrderWorklog[]

  @@index([completionDate, createdAt])
  @@index([customerServiceId])
  @@index([workOrderId]) // Index for query performance
  @@index([status])
  @@map("production_orders")
}

model Ingredient {
  id                 String          @id @default(cuid())
  orderId            String
  materialName       String // 原料品名
  unitContentMg      Float // 單粒含量
  isCustomerProvided Boolean         @default(true) // 是否客戶指定
  isCustomerSupplied Boolean         @default(true) // 是否客戶提供
  order              ProductionOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([materialName])
  @@map("ingredients")
}

model OrderWorklog {
  id                  String   @id @default(cuid())
  orderId             String
  workDate            DateTime
  headcount           Int
  startTime           String   @db.VarChar(5)
  endTime             String   @db.VarChar(5)
  notes               String?
  effectiveMinutes    Int
  calculatedWorkUnits Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  order ProductionOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, workDate])
  @@index([workDate, createdAt])
  @@map("order_worklogs")
}

// ===== 統一工作單系統 (Unified Work Order System) =====

// Simplified status workflow - only CANCELLED and COMPLETED
// Default state is NULL (ongoing work, managed by checkboxes)
enum WorkOrderStatus {
  PAUSED // 已暫停 - Paused/On Hold
  CANCELLED // 已取消 - Cancelled
  COMPLETED // 已完成 - Fully completed
}

enum WorkType {
  PACKAGING // 包裝
  PRODUCTION // 生產
  PRODUCTION_PACKAGING // 生產+包裝
  WAREHOUSING // 倉務
}

enum ProductionOrderStatus {
  NOT_STARTED  // 未開始
  IN_PROGRESS  // 進行中
  COMPLETED    // 已完成
}

model UnifiedWorkOrder {
  id        String  @id @default(cuid())
  jobNumber String? @unique // 訂單編號（如有） - 改為可選

  // Status Management with Audit
  status          WorkOrderStatus? // Nullable - NULL means ongoing work
  statusUpdatedAt DateTime?
  statusUpdatedBy String?

  markedDate   DateTime @default(now()) // 記號日期（系統自動記錄創建時間）
  customerName String   @db.VarChar(200)

  // User references with safe deletion (nullable for legacy imports)
  personInChargeId String?
  personInCharge   User?   @relation("WorkOrderPersonInCharge", fields: [personInChargeId], references: [id], onDelete: Restrict)

  workType WorkType

  // VIP標記（簡化名稱）
  isCustomerServiceVip Boolean @default(false) // 客服VIP
  isBossVip            Boolean @default(false) // 老闆VIP

  // 物料到齊狀態
  expectedProductionMaterialsDate DateTime? // 預計生產物料到齊的日期
  expectedPackagingMaterialsDate  DateTime? // 預計包裝物料到齊的日期
  productionMaterialsReady        Boolean   @default(false) // 生產物料齊
  packagingMaterialsReady         Boolean   @default(false) // 包裝物料齊

  // 數量
  productionQuantity Int?
  packagingQuantity  Int?

  // 交貨期
  requestedDeliveryDate DateTime? // 要求交貨的日期
  internalExpectedDate  DateTime? // 內部預計交貨期

  // 狀態標記
  isUrgent          Boolean @default(false) // 客人要求加急
  productionStarted Boolean @default(false) // 已開生產線
  isCompleted       Boolean @default(false) // 已經完成

  // 工作描述
  workDescription String @db.Text

  // 保留舊欄位以兼容（標記為廢棄）
  isNewProductVip        Boolean   @default(false) // @deprecated
  isComplexityVip        Boolean   @default(false) // @deprecated
  yearCategory           String?   @db.VarChar(50) // @deprecated
  expectedCompletionDate DateTime? // @deprecated
  dataCompleteDate       DateTime? // @deprecated
  notifiedDate           DateTime?
  paymentReceivedDate    DateTime?
  shippedDate            DateTime?
  productionQuantityStat String?
  packagingQuantityStat  String?
  internalDeliveryTime   String?   @db.VarChar(100) // @deprecated
  customerRequestedTime  String?   @db.VarChar(100) // @deprecated
  tokyoData              String?   @db.Text
  notes                  String?   @db.Text

  capsulationOrder       CapsulationOrder?
  productionOrders       ProductionOrder[]       @relation("ProductionWorkOrder") // 1:many relationship
  managerSchedulingEntry ManagerSchedulingEntry?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // Enhanced Indexes for Performance
  @@index([jobNumber])
  @@index([customerName])
  @@index([personInChargeId])
  @@index([workType])
  @@index([status])
  @@index([markedDate])
  @@index([createdAt(sort: Desc)])
  @@index([customerName, workType]) // Composite for common queries
  @@index([status, requestedDeliveryDate]) // Composite for dashboard
  @@map("unified_work_orders")
}

model CapsulationOrder {
  id          String           @id @default(cuid())
  workOrderId String           @unique
  workOrder   UnifiedWorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  productName        String    @default("未命名產品")
  productionQuantity Int
  unitWeightMg       Float
  batchTotalWeightMg Float
  completionDate     DateTime?

  // User reference with safe deletion
  customerServiceId String?
  customerService   User?   @relation("CapsulationOrderCustomerService", fields: [customerServiceId], references: [id], onDelete: SetNull) // OK to clear if user deleted

  capsuleColor             String?
  capsuleSize              String?
  capsuleType              String?
  processIssues            String?
  qualityNotes             String?
  actualProductionQuantity Int?
  materialYieldQuantity    Int?
  lockPassword             String?

  ingredients CapsulationIngredient[]
  worklogs    CapsulationWorklog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workOrderId])
  @@index([customerServiceId])
  @@map("capsulation_orders")
}

model CapsulationIngredient {
  id                 String           @id @default(cuid())
  orderId            String
  materialName       String // 原料品名
  unitContentMg      Float // 單粒含量
  isCustomerProvided Boolean          @default(true) // 是否客戶指定
  isCustomerSupplied Boolean          @default(true) // 是否客戶提供
  order              CapsulationOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([materialName])
  @@map("capsulation_ingredients")
}

model CapsulationWorklog {
  id                  String   @id @default(cuid())
  orderId             String
  workDate            DateTime
  headcount           Int
  startTime           String   @db.VarChar(5)
  endTime             String   @db.VarChar(5)
  notes               String?
  effectiveMinutes    Int
  calculatedWorkUnits Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  order CapsulationOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, workDate])
  @@index([workDate, createdAt])
  @@map("capsulation_worklogs")
}

// ===== v2.0 新增模型 =====

// Legacy WorkOrder model for ISO compliance (renamed to avoid conflict)
model LegacyWorkOrder {
  id                   String    @id @default(cuid())
  orderId              String // 關聯的訂單ID
  orderNumber          String    @unique // 工作單號
  productName          String // 產品名稱
  batchSize            Int // 批次大小
  productionSteps      String    @db.Text // 生產步驟 (JSON as String)
  qualityControlPoints String    @db.Text // 質量控制點 (JSON as String)
  riskAssessment       String?   @db.Text // 風險評估 (JSON as String)
  isoCompliant         Boolean   @default(true) // ISO 合規
  isoStandard          String    @default("ISO 9001") // ISO 標準
  status               String    @default("draft") // 狀態 (draft, approved, in_progress, completed)
  approvedBy           String? // 批准人
  approvedAt           DateTime? // 批准時間
  generatedAt          DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([orderId])
  @@index([status, generatedAt])
  @@index([orderNumber])
  @@map("legacy_work_orders")
}

model AIRecipe {
  id               String   @id @default(cuid())
  name             String // 配方名稱
  description      String? // 配方描述
  targetEffect     String // 目標功效
  targetAudience   String? // 目標受眾
  dosageForm       String   @default("capsule") // 劑型 (capsule, tablet, powder)
  ingredients      String   @db.Text // 原料列表 (JSON as String)
  dosage           String   @db.Text // 劑量信息 (JSON as String)
  efficacyScore    Float? // 功效評分 (0-10)
  safetyScore      Float? // 安全性評分 (0-10)
  costAnalysis     String?  @db.Text // 成本分析 (JSON as String)
  regulatoryStatus String? // 法規狀態
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([name])
  @@index([isActive, createdAt])
  @@index([targetEffect])
  @@map("ai_recipes")
}

model IngredientPrice {
  id           String    @id @default(cuid())
  materialName String // 原料名稱
  supplier     String // 供應商
  price        Float // 價格
  currency     String    @default("HKD") // 貨幣
  unit         String    @default("kg") // 單位
  minimumOrder Float? // 最小訂購量
  leadTime     String? // 交貨期
  quality      String    @default("A") // 質量等級 (A, B, C)
  source       String? // 數據來源
  validFrom    DateTime  @default(now()) // 有效期開始
  validTo      DateTime? // 有效期結束
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([materialName, supplier])
  @@index([validFrom, validTo])
  @@index([quality])
  @@map("ingredient_prices")
}

model ProductEfficacy {
  id                String   @id @default(cuid())
  ingredientName    String // 原料名稱
  effect            String // 功效
  evidenceLevel     String // 證據等級 (A, B, C, D)
  dosage            Float // 劑量
  scientificBasis   String?  @db.Text // 科學依據
  clinicalTrials    String?  @db.Text // 臨床試驗數據 (JSON as String)
  safetyProfile     String?  @db.Text // 安全性檔案 (JSON as String)
  interactions      String?  @db.Text // 相互作用 (JSON as String)
  contraindications String?  @db.Text // 禁忌症 (JSON as String)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([ingredientName, effect])
  @@index([evidenceLevel])
  @@index([isActive])
  @@map("product_efficacy")
}

model QCFile {
  id                 String    @id @default(cuid())
  legacyWorkOrderId  String // 關聯的工作單ID (renamed from workOrderId)
  testMethods        String    @db.Text // 測試方法 (JSON as String)
  acceptanceCriteria String    @db.Text // 接受標準 (JSON as String)
  inspectionRecords  String?   @db.Text // 檢驗記錄 (JSON as String)
  isoStandard        String    @default("ISO 9001") // ISO 標準
  testResults        String?   @db.Text // 測試結果 (JSON as String)
  inspector          String? // 檢驗員
  inspectedAt        DateTime? // 檢驗時間
  status             String    @default("pending") // 狀態 (pending, in_progress, completed, failed)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([legacyWorkOrderId])
  @@index([status, createdAt])
  @@index([inspector])
  @@map("qc_files")
}

model ProductDatabase {
  id               String   @id @default(cuid())
  productName      String // 產品名稱
  category         String? // 分類
  formula          String   @db.Text // 配方 (JSON as String)
  efficacy         String?  @db.Text // 功效 (JSON as String)
  safety           String?  @db.Text // 安全性 (JSON as String)
  regulatoryStatus String?  @db.Text // 法規狀態 (JSON as String)
  version          String   @default("1.0") // 版本
  isActive         Boolean  @default(true)
  tags             String?  @db.Text // 標籤 (JSON as String)
  notes            String?  @db.Text // 備註
  createdBy        String? // 創建者
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([productName])
  @@index([category, isActive])
  @@index([createdBy])
  @@map("product_database")
}

model AdCopy {
  id                  String   @id @default(cuid())
  productId           String? // 關聯的產品ID
  targetMarket        String // 目標市場
  language            String   @default("zh-TW") // 語言
  copyType            String // 廣告詞類型 (headline, description, benefit, warning)
  content             String   @db.Text // 廣告詞內容
  regulatoryCompliant Boolean  @default(false) // 法規合規
  evidenceBased       Boolean  @default(false) // 基於證據
  aiGenerated         Boolean  @default(true) // AI 生成
  version             String   @default("1.0") // 版本
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([productId])
  @@index([targetMarket, language])
  @@index([copyType, isActive])
  @@map("ad_copies")
}

// ===== 配方庫系統 =====

model RecipeLibrary {
  id          String  @id @default(cuid())
  recipeName  String // 配方名稱
  description String? @db.Text // 配方描述

  // 來源訊息（支援多個訂單）
  sourceOrderIds String @db.Text // JSON: ["order1", "order2"]
  customerName   String // 客戶名稱
  productName    String // 產品名稱

  // 配方內容
  ingredients  String @db.Text // JSON: RecipeIngredient[]
  unitWeightMg Float // 單粒總重量

  // 🔑 去重關鍵：配方指紋（唯一索引）
  recipeFingerprint String @unique // 基於客戶+產品+原料組合的 SHA-256 hash

  // 膠囊規格
  capsuleColor String? // 膠囊顏色
  capsuleSize  String? // 膠囊大小 (#1, #0, #00)
  capsuleType  String? // 膠囊類型

  // 分類與標籤
  category String? // 分類
  tags     String? @db.Text // JSON: string[]

  // 統計數據
  productionCount  Int       @default(1) // 生產次數（相同配方生產了多少次）
  usageCount       Int       @default(0) // 創建訂單次數（從此配方創建了多少新訂單）
  lastUsedAt       DateTime? // 最後使用日期（用於創建新訂單）
  lastProductionAt DateTime? // 最後生產日期

  // 元數據
  notes     String?  @db.Text // 備註
  isActive  Boolean  @default(true) // 是否啟用
  createdBy String? // 創建者
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // AI 功效分析
  aiEffectsAnalysis String?   @db.Text // AI 分析的配方功效
  aiAnalyzedAt      DateTime? // AI 分析時間

  // 🆕 AI 優化建議
  aiSuggestions   String?   @db.Text // JSON: suggestion[]
  aiSuggestionsAt DateTime? // 分析時間

  // 🆕 原料相互作用分析
  aiInteractions   String?   @db.Text // JSON: warning[]
  aiInteractionsAt DateTime? // 分析時間

  // 🆕 配方類型與來源
  recipeType String @default("production") // "production" | "template"
  sourceType String @default("order") // "order" | "manual" | "batch_import"

  @@index([customerName])
  @@index([productName])
  @@index([recipeName])
  @@index([category, isActive])
  @@index([productionCount])
  @@index([usageCount])
  @@index([createdAt])
  @@index([recipeType])
  @@index([sourceType])
  @@map("recipe_library")
}

// ===== Manager Scheduling Table (經理排單表) =====

model ManagerSchedulingEntry {
  id          String           @id @default(cuid())
  workOrderId String           @unique
  workOrder   UnifiedWorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  priority Int // 1, 2, 3... for drag-drop ordering

  // Bidirectional sync fields (synced with CapsulationOrder)
  processIssues String? @db.Text // 製程問題 (synced with CapsulationOrder.processIssues)
  qualityNotes  String? @db.Text // 品質備註 (synced with CapsulationOrder.qualityNotes)

  // Scheduling-specific field
  expectedProductionStartDate String? @db.VarChar(200) // 預計開產日期 (text field)

  createdAt DateTime @default(now()) // System-generated only, NOT editable
  updatedAt DateTime @updatedAt
  createdBy String? // For audit trail

  @@index([priority])
  @@index([workOrderId])
  @@map("manager_scheduling_entries")
}
